<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>The Bear&#39;s Toes</title>
<link>https://rtedwards.github.io/</link>
<atom:link href="https://rtedwards.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.4.537</generator>
<lastBuildDate>Sat, 13 Jan 2024 00:00:00 GMT</lastBuildDate>
<item>
  <title>Pub Quiz: Summing Two Random Variables</title>
  <link>https://rtedwards.github.io/posts/summing_random_variables/</link>
  <description><![CDATA[ 




<section id="pub-quiz" class="level2">
<h2 class="anchored" data-anchor-id="pub-quiz"># Pub Quiz</h2>
<p>Last week, my company held a pub quiz. This was no ordinary pub quiz, it was designed in a way for teams to learn about other teams. One person from each team submitted four questions about their team. We ended up wtih about 60 questions from all across the company. And when I say “all” I mean <em>all</em>. We had questions about Data Science, Commercial, Operations, Engineering, Product, Marketing, Leadership, Human Resources, you name it. As someone who is fairly familiar with all aspects of our products and engineering teams (but by no means an expert in all these areas) by having been here over four years and written my share of documentation, I came into the pub quiz <em>with confidence</em>. Much of that confidence due to expecting to not need to know British pop culture back through the 70s as is standard in an actual pub quiz.</p>
<p>That confidence was quickly smashed with questions like:</p>
<ul>
<li><em>What was the 2023 Coca Cola Christmas commercial slogan?</em></li>
<li><em>What is the collective age of the Customer Support team?</em></li>
<li><em>What month was repo XXX created?</em></li>
</ul>
<p>The Data Science round was the trickiest of them all, in no small part because reading the question took up almost all of the response time! After the quiz, my teammate who wrote the Data Science questions shared one that didn’t quite make the cut.</p>
<p>I share the question with the reader here, with only some minor rewording. My answer follows.</p>
<p><br>
</p>
</section>
<section id="question" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="question"># Question</h2>
<section id="the-preamble" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="the-preamble">## The preamble</h3>
<p>You fit the following univariate regression model using Ordinary Least Squares (OLS)</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>In the original question, the OLS abbreviation was given without the unabbreviated form. Not sure it would have made the question any easier.</p>
</div></div><p><img src="https://latex.codecogs.com/png.latex?%0Ay%20=%20%5Calpha%20+%20%5Cbeta%20x%20+%20%5Cepsilon%0A"></p>
<p>Where the residual, <img src="https://latex.codecogs.com/png.latex?%5Cepsilon">, is Normally distributed with mean 0 and standard deviation 1, that is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cepsilon%20%5Csim%20%7BN%7D(0,%201)%0A"></p>
<p>From OLS, you determine:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Calpha=3"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cbeta=2"></li>
</ul>
<hr>
<p>The next month, your colleague reruns the experiement and collects the same size dataset. They forgot to check the callibration of the machine used to collect the data and as a result the dataset now has a measurement error, <img src="https://latex.codecogs.com/png.latex?u">. That is,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cdisplaylines%7B%0A%20%20%20%20%5Cbegin%7Balign%7D%0A%20%20%20%20y%5E*%20&amp;%5Cequiv%20y%20+%20u%20%5C%5C%0A%20%20%20%20y%5E*%20&amp;=%20%5Calpha%5E*%20+%20%5Cbeta%5E*x%20+%20%5Cepsilon%5E*%0A%20%20%20%20%5Cend%7Balign%7D%0A%7D%0A"></p>
<p>The measurement error has mean 2 and standard deviation 2.<br>
<img src="https://latex.codecogs.com/png.latex?%0Au%20%5Csim%20N(2,2)%0A"></p>
<p>The residuals in the new sample dataset are also normally distributed.<br>
<img src="https://latex.codecogs.com/png.latex?%0A%5Cepsilon%5E*%20%5Csim%20%7BN%7D(%5Cmu%5E*,%20%5Csigma%5E*)%0A"><br>
</p>
</section>
<section id="and-finally-the-question" class="level3">
<h3 class="anchored" data-anchor-id="and-finally-the-question">## And finally the question</h3>
<p>What values does your colleague find when running a regression with OLS? (Try solving with a pen and paper):</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Calpha%5E*%20=%20%5Ctext%7B%20??%7D"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cbeta%5E*%20=%20%5Ctext%7B%20??%7D"></li>
<li><img src="https://latex.codecogs.com/png.latex?u%5E*%20=%20%5Ctext%7B%20??%7D"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Csigma%5E*%20=%20%5Ctext%7B%20??%7D"><br>
</li>
</ul>
</section>
</section>
<section id="analytical-solution" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="analytical-solution"># Analytical solution</h2>
<p>There’s a few things to immediately note:</p>
<ol type="1">
<li>The <em>hell</em> this is a pub quiz question!<br>
</li>
<li>We assume <img src="https://latex.codecogs.com/png.latex?y%5E*">, <img src="https://latex.codecogs.com/png.latex?%5Cepsilon">, <img src="https://latex.codecogs.com/png.latex?u">, and <img src="https://latex.codecogs.com/png.latex?%5Cepsilon%5E*"> are independent random variables. If they weren’t, this would be a wee bit trickier (we would need to have information about the joint distributions, i.e.&nbsp;covariances).</li>
<li>We recognize that the new residuals are going to include the previous residuals as well as the new measurement error, <img src="https://latex.codecogs.com/png.latex?%5Cepsilon%5E*%20=%20%5Cepsilon%20+%20u">.</li>
<li>Whether it was a typo or meant to be tricky, the question states the standard deviation rather than the variance for the Normal distribution. Typically, the notation is <img src="https://latex.codecogs.com/png.latex?N(%5Cmu,%20%5Csigma%5E2)">. Rewriting into the standard notation:</li>
</ol>

<div class="no-row-height column-margin column-container"><div class="">
<p>I’ve highly probably in all likelihood had the same question on a Probability exam during my Statistics postgrad.</p>
</div></div><p><img src="https://latex.codecogs.com/png.latex?%0A%5Cdisplaylines%7B%0A%20%20%20%20%5Cbegin%7Balignat*%7D%7B2%7D%0A%20%20%20%20%5Cepsilon%20&amp;%5Csim%20N(0,%201)%20&amp;&amp;%20%5Crightarrow%20N(0,%201)%20%5C%5C%0A%20%20%20%20u%20&amp;%5Csim%20N(2,%202)%20&amp;&amp;%20%5Crightarrow%20N(2,%204)%20%5C%5C%0A%20%20%20%20%5Cepsilon%5E*%20&amp;%5Csim%20N(%5Cmu%5E*,%20%5Csigma%5E%7B*%7D)%20&amp;&amp;%20%5Crightarrow%20N(%5Cmu%5E*,%20%5Csigma%5E%7B*2%7D)%0A%20%20%20%20%5Cend%7Balignat*%7D%0A%7D%0A"><br>
</p>
<p>The problem boils down to realizing that we have a summation of two independent Normally distributed random variables, <img src="https://latex.codecogs.com/png.latex?y"> and <img src="https://latex.codecogs.com/png.latex?u">. How do independent Normally distributed random variables sum? If you don’t remember, don’t worry, neither did I. After some revision we know that <span class="citation" data-cites="ross2010">(Ross 2010)</span>:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cdisplaylines%7B%0A%20%20%20%20%5Cbegin%7Balign%7D%0A%20%20%20%20%5Ctext%7BE%7D%5BX%20+%20Y%5D%20%20%20&amp;=%20%5Ctext%7BE%7D%5BX%5D%20+%20%5Ctext%7BE%7D%5BY%5D%20%5C%5C%0A%20%20%20%20%5Ctext%7BVar%7D%5BX%20+%20Y%5D%20&amp;=%20%5Ctext%7BVar%7D%5BX%5D%20+%20%5Ctext%7BVar%7D%5BY%5D%20+%202%5Ctext%7BCov%7D%5BX,Y%5D%0A%20%20%20%20%5Cend%7Balign%7D%0A%7D%0A"></p>
<p>The assumption that the random variables are independent means the covariance is zero, <img src="https://latex.codecogs.com/png.latex?2%5Ctext%7BCov%7D%5BX,Y%5D%20=%200">. We can simply add the means and variances <span class="citation" data-cites="ross2010">(Ross 2010, 256–57)</span> giving:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cdisplaylines%7B%0A%20%20%20%20%5Cbegin%7Balignat*%7D%7B2%7D%0A%20%20%20%20y%5E*%20&amp;=%20y%20&amp;&amp;+%20u%20%5C%5C%0A%20%20%20%20%20%20%20%20&amp;=%20%5Calpha%20+%20%5Cbeta%20x%20&amp;&amp;+%20%5Cepsilon%20+%20u%20%5C%5C%0A%20%20%20%20%20%20%20%20&amp;=%20%5Calpha%20+%20%5Cbeta%20x%20&amp;&amp;+%20%5Cepsilon%5E*%20%5C%5C%0A%20%20%20%20%20%20%20%20&amp;=%20%5Calpha%20+%20%5Cbeta%20x%20&amp;&amp;+%20%5CBig(%20N(%5Cmu_%7B%5Cepsilon%7D,%20%5Csigma_%7B%5Cepsilon%7D%5E2)%20+%20N(%5Cmu_u,%20%5Csigma_u%5E2)%20%5CBig)%20%5C%5C%0A%20%20%20%20%20%20%20%20&amp;=%20%5Calpha%20+%20%5Cbeta%20x%20&amp;&amp;+%20%5CBig(%20N(%5Cmu_%7B%5Cepsilon%7D%20+%20%5Cmu_u,%20%5Csigma_%7B%5Cepsilon%7D%5E2%20+%20%5Csigma_u%5E2)%20%5CBig)%20%5C%5C%0A%20%20%20%20%20%20%20%20&amp;=%20%5Calpha%20+%20%5Cbeta%20x%20&amp;&amp;+%20N(0%20+%202,%201%20+%204)%20%5C%5C%0A%20%20%20%20%20%20%20%20&amp;=%20%5Calpha%20+%20%5Cbeta%20x%20&amp;&amp;+%20N(2,%205)%20%5C%5C%0A%20%20%20%20%5Cend%7Balignat*%7D%0A%7D%0A"></p>
<p>where,</p>
<div class="columns">
<div class="column" style="width:20%;">
<!-- empty column to create gap -->
</div><div class="column" style="width:30%;">
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cdisplaylines%7B%0A%20%20%20%20%5Cbegin%7Balignat*%7D%7B2%7D%0A%20%20%20%20%5Cmu_%7B%5Cepsilon%5E*%7D%20&amp;=%20%5Cmu_%7B%5Cepsilon%7D%20&amp;&amp;+%20%5Cmu_u%20%5C%5C%0A%20%20%20%20%20%20%20%20&amp;=%200%20&amp;&amp;+%202%20%5C%5C%0A%20%20%20%20%20%20%20%20&amp;=%202%0A%20%20%20%20%5Cend%7Balignat*%7D%0A%7D%0A"></p>
</div><div class="column" style="width:30%;">
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cdisplaylines%7B%0A%20%20%20%20%5Cbegin%7Balignat*%7D%7B2%7D%0A%20%20%20%20%5Csigma_%7B%5Cepsilon%5E*%7D%5E2%20&amp;=%20%5Csigma_%7B%5Cepsilon%7D%5E2%20&amp;&amp;+%20%5Csigma_u%5E2%20%5C%5C%0A%20%20%20%20%20%20%20%20&amp;=%201%20&amp;&amp;+%204%20%5C%5C%0A%20%20%20%20%20%20%20%20&amp;=%205%0A%20%20%20%20%5Cend%7Balignat*%7D%0A%7D%0A"></p>
</div><div class="column" style="width:20%;">
<!-- empty column to create gap -->
</div>
</div>
<p>Plugging in the values for <img src="https://latex.codecogs.com/png.latex?%5Calpha"> and <img src="https://latex.codecogs.com/png.latex?%5Cbeta">, we find the following solution: <img src="https://latex.codecogs.com/png.latex?%0Ay%5E*%20=%203%20+%202x%20+%20N(2,%205)%0A"></p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Calpha%5E*%20=%203"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cbeta%5E*%20=%202"></li>
<li><img src="https://latex.codecogs.com/png.latex?u%5E*%20=%202"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Csigma%5E*%20=%20%5Csqrt%7B5%7D"><br>
</li>
</ul>

<div class="no-row-height column-margin column-container"><div class="">
<p>Remember, we were asked for <img src="https://latex.codecogs.com/png.latex?%5Csigma%5E*"> not <img src="https://latex.codecogs.com/png.latex?%5Csigma%5E%7B*2%7D">.</p>
</div></div><p>We can arguably simplify this a bit further by noting that the bias, <img src="https://latex.codecogs.com/png.latex?%5Calpha">, and the mean of the residuals, <img src="https://latex.codecogs.com/png.latex?%5Cmu_%7B%5Cepsilon%5E*%7D">, are both constants that shift the intercept and can be grouped. Subtracting the mean of the error from the bias…</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cdisplaylines%7B%0A%20%20%20%20%5Cbegin%7Balignat*%7D%7B3%7D%0A%20%20%20%20y%5E*%20&amp;=%20%5Calpha%20&amp;&amp;+%20%5Cbeta%20x%20&amp;&amp;&amp;+%20N(2,%205)%20%5C%5C%0A%20%20%20%20%20%20%20%20&amp;=%203%20%20%20%20%20%20&amp;&amp;+%202x%20%20%20%20%20%20&amp;&amp;&amp;+%20N(2,%205)%20%5C%5C%0A%20%20%20%20%20%20%20%20&amp;=%20(3-2)%20%20&amp;&amp;+%202x%20%20%20%20%20%20&amp;&amp;&amp;+%20N(0,%205)%20%5C%5C%0A%20%20%20%20%20%20%20%20&amp;=%201%20%20%20%20%20%20&amp;&amp;+%202x%20%20%20%20%20%20&amp;&amp;&amp;+%20N(0,5)%0A%20%20%20%20%5Cend%7Balignat*%7D%0A%7D%0A"></p>
<p>And rewritting using the standard deviation rather than the variance (like in the original question) we arrive at:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ay%20=%201%20+%202x%20+%20N(0,%5Csqrt%7B5%7D)%0A"></p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Calpha%5E*%20=%201"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cbeta%5E*%20=%202"></li>
<li><img src="https://latex.codecogs.com/png.latex?u%5E*%20=%202"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Csigma%5E*%20=%20%5Csqrt%7B5%7D"><br>
</li>
</ul>
</section>
<section id="quantative-solution" class="level2">
<h2 class="anchored" data-anchor-id="quantative-solution"># Quantative solution</h2>
</section>
<section id="in-the-end-it-didnt-even-matter" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="in-the-end-it-didnt-even-matter"># In the end, it didn’t even matter</h2>
<p>Thankfully, this question didn’t make it into our company pub quiz. Even if it had, I think everyone (sans the author) would have had to ultimately guess the answer. We only had 30 seconds per question. I didn’t even finish reading the problem statement let alone begin tackling it in that time!</p>
<p>In the end, whether this question would have been included or not, wouldn’t have changed the outcome. The quiz was neck and neck between 3 teams for most of the game. My team bouncing between <img src="https://latex.codecogs.com/png.latex?%5Ctext%7B1%7D%5E%7Bst%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Ctext%7B3%7D%5E%7Brd%7D"> place. That is until the final round of questions from the Leadership team, which were highly specific to a certain someone.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>If we have another pub quiz, I’ll make sure to sling in some equally maladjusted questions. But I’ll post the answers beforehand here.<br>
<br>
Watch this space.</p>
</div></div><p>Good thing I had the CEO on my team 🥇</p>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-ross2010" class="csl-entry">
Ross, Sheldon. 2010. <em>A First Course in Probability</em>. 8th ed. Pearson Prentice Hall.
</div>
</div></section></div> ]]></description>
  <category>probability</category>
  <category>pub quiz</category>
  <guid>https://rtedwards.github.io/posts/summing_random_variables/</guid>
  <pubDate>Sat, 13 Jan 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Waltzing with Python’s Walrus Operator</title>
  <link>https://rtedwards.github.io/posts/waltzing_with_the_walrus/</link>
  <description><![CDATA[ 




<p><a href="https://docs.python.org/3/whatsnew/3.8.html#assignment-expressions">Python 3.8</a> introduced a new assignment operator with <a href="https://peps.python.org/pep-0572/">PEP 572</a> called <strong>assignment expressions</strong>, a.k.a the <strong>walrus operator</strong>. The walrus operator uses the new walrus-like syntax <code>:=</code>, to assign variables within an expression.</p>
<p>It’s been out for a few years at this point (at the time of writing Python 3.12 is around the corner) and I’ve found some joy in how it’s helped elegantly shorten some parts of my code. Here are the ways I’ve made use of the walrus operator.</p>
<section id="error-handling" class="level2">
<h2 class="anchored" data-anchor-id="error-handling">Error Handling</h2>
<p>The walrus operator can help reduce repetition and make error handling a bit more streamlined. In the following snippet, <code>func()</code> will return <code>None</code> to represent an error occurred.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> func()</span>
<span id="cb1-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> x:</span>
<span id="cb1-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error message"</span>)</span>
<span id="cb1-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span></code></pre></div>
<p>Using the walrus operator, the call to <code>func()</code> can be inlined.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:=</span> func():</span>
<span id="cb2-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error message"</span>)</span>
<span id="cb2-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span></code></pre></div>
<p>Shaving off a single line may seem trivial but those saved lines can add up. For example, when parsing user inputs and performing validation. In the following snippet, we want to validate user inputs <code>x</code>, <code>y</code>, and <code>z</code>. If there’s a validation problem, <code>validate</code> will return a string with a message explaining what is wrong with the input and a message of how to fix. These messages get appended to a list so all validation messages can be printed out together.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">validation_errors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb3-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> msg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:=</span> validate(x):</span>
<span id="cb3-3">    validation_errors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> msg</span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> msg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:=</span> validate(y):</span>
<span id="cb3-6">    validation_errors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> msg</span>
<span id="cb3-7"></span>
<span id="cb3-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> msg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:=</span> validate(z):</span>
<span id="cb3-9">    validation_errors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> msg</span>
<span id="cb3-10"></span>
<span id="cb3-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> validation_errors: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a non-empty list resolves to True</span></span>
<span id="cb3-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> error <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> validation_errors:</span>
<span id="cb3-13">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(error)</span>
<span id="cb3-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span></code></pre></div>
</section>
<section id="comprehensions" class="level2">
<h2 class="anchored" data-anchor-id="comprehensions">Comprehensions</h2>
<p>Let’s say we wanted to create a list of results from expensive function call but only results that aren’t <code>None</code>. With a list comprehension, the expensive function would need to be called twice. Not ideal.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb4-2">    expensive_function(i) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> expensive_function(i) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb4-3">]</span></code></pre></div>
<p>Of course, you could use normal for loop syntax but it’s a fair bit more verbose, and for illustrative purposes, we’re allergic to verbose.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb5-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> a <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb5-3">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expensive_function(i)</span>
<span id="cb5-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb5-5">        y.append(x)</span></code></pre></div>
<p>The walrus operator plops to the rescue here and allows us to use a list comprehension.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb6-2">    x <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:=</span> expensive_function(i)) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb6-3">]</span></code></pre></div>
<p>This also applies to dictionary comprehensions.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb7-2">    i: x <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:=</span> expensive_function(i)) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb7-3">}</span></code></pre></div>
</section>
<section id="do-while-loops" class="level2">
<h2 class="anchored" data-anchor-id="do-while-loops">Do While Loops</h2>
<p>A do-while loop was proposed for Python in <a href="https://peps.python.org/pep-0315/">PEP 315</a> but was rejected for not providing a material improvement over the following:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb8-2">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f(a, b) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># setup code</span></span>
<span id="cb8-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> x:   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># condition</span></span>
<span id="cb8-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb8-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># loop body using x</span></span></code></pre></div>
<p>A shortened version of do-while loop can be accomplished by having setup code execute once before the loop and moving the condition into a while loop. However, this is error-prone; <code>x = f(a, b)</code> is duplicated for both the setup code and the loop body, and if it needs changing there are now multiple places that must be updated.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f(a, b) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># setup code</span></span>
<span id="cb9-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> x:    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># condition</span></span>
<span id="cb9-3">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f(a, b)</span>
<span id="cb9-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># loop body using x</span></span></code></pre></div>
<p>With the walrus operator, it can all be inlined to the while condition.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:=</span> f(a, b): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># setup code and condition</span></span>
<span id="cb10-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># loop body using x</span></span></code></pre></div>
</section>
<section id="pattern-matching" class="level2">
<h2 class="anchored" data-anchor-id="pattern-matching">Pattern Matching</h2>
<p>The walrus operator can also be useful in Pattern Matching. Structural Pattern Matching was introduced in Python 3.10 with <a href="https://peps.python.org/pep-0622/">PEP 622</a>. If you’re not yet familiar see <a href="https://peps.python.org/pep-0636/">PEP 363</a> for a tutorial. The walrus can be useful to inline a function call and store the return value in a variable for use in the cases.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">match</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:=</span> f(a, b):</span>
<span id="cb11-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb11-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># do stuff with x</span></span>
<span id="cb11-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb11-5">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># do more stuff with x</span></span>
<span id="cb11-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb11-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># even more doing with x</span></span></code></pre></div>
</section>
<section id="an-over-the-top-overuse-example" class="level2">
<h2 class="anchored" data-anchor-id="an-over-the-top-overuse-example">An Over-the-Top Overuse Example</h2>
<p>While the walrus operator is handy for shaving off a few lines of code, inlining too much can make code difficult to reason about. Use it sparingly, especially with other code-golfing operators. For example, with the ternary operator.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_height(name) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:=</span> get_name(user_id)) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span></code></pre></div>
<p>I think this can be okay but I also think it’s clearer written long-form,</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:=</span> get_name(user_id):</span>
<span id="cb13-2">    height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_height(name)</span>
<span id="cb13-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb13-4">    height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span></code></pre></div>
<p>It could be formatted over multiple lines so it’s just as readible as a normal <code>if</code> / <code>else</code> and to keep the benefits of the ternary usage by only assigning <code>height</code> once, but it’s now a whopping 5 lines.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb14-2">    get_height(name)</span>
<span id="cb14-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:=</span> get_name(user_id))</span>
<span id="cb14-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb14-5">)</span></code></pre></div>
<p>And remember, just because you can doesn’t mean you should write code like below, if you can avoid it. This example is modified from my own code.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">params: Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>]]</span>
<span id="cb15-2"></span>
<span id="cb15-3">sampler_weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb15-4">    {</span>
<span id="cb15-5">        ModeEnum(mode): weight</span>
<span id="cb15-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> mode, weight <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> normalize_weights(weights).items()</span>
<span id="cb15-7">    }</span>
<span id="cb15-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:=</span> params.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sampler"</span>, {}).get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"weights"</span>))</span>
<span id="cb15-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>}</span>
<span id="cb15-10">)</span></code></pre></div>
<p>Here, I’ve slapped a dictionary comprehension, a ternary operator, and a walrus operator into the same expression. There’s a lot going on, but it’s formatted over multiple lines to help delineate what’s happening. The variable, <code>params</code>, holds the contents of a configuration <code>.toml</code> that I needed to parse some weights from and convert into an dictionary of <code>{enum: weight}</code>.</p>


</section>

 ]]></description>
  <category>python</category>
  <guid>https://rtedwards.github.io/posts/waltzing_with_the_walrus/</guid>
  <pubDate>Sat, 12 Aug 2023 23:00:00 GMT</pubDate>
</item>
</channel>
</rss>
